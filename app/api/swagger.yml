# swagger.yml

openapi: 3.0.0
info:
    title: "Bouffe Action REST API"
    description: "An API to handle Bouffe-Action's workflow"
    version: "1.0.0"

servers:
    - url: "/api"

components:
    schemas:
        Entity:
            type: "object"
            required:
                - eid
                - ename
                - etype
            properties:
                eid:
                    type: "string"
                ename:
                    type: "string"
                etype:
                    type: "string"
        EntityType:
            type: "string"
            enum:
                - provider
                - product
        Command:
            type: "object"

    parameters:
        eid:
            name: "eid"
            description: "Entity Code"
            in: path
            required: True
            schema:
                type: "string"
        etype:
            name: "etype"
            description: "Entity Type"
            in: path
            required: True
            schema:
                $ref: "#/components/schemas/EntityType"
        rid:
            name: "rid"
            description: "Record ID"
            in: path
            required: True
            schema:
                type: "string"


paths:
    /v1/ping:
        get:
            operationId: "app.api.utility.ping"
            tags:
                - "Utility"
            summary: "Returns a ping"
            responses:
                "200":
                    description: "Successfully get a ping"

    # /v1/entity:
    #     post:
    #         operationId: "app.api.entity.create_entity"
    #         tags:
    #             - "entities"
    #         summary: "Add new entity"
    #         requestBody:
    #             description: "Create new entity"
    #             required: True
    #             content:
    #                 application/json:
    #                     schema:
    #                         x-body-name: "entity"
    #                         $ref: "#/components/schemas/Entity"
    #         responses:
    #             "200":
    #                 description: "Sucessful creation"
    #             "400":
    #                 description: "Another entity with this code already exists"
    /v1/entities:
        get:
            operationId: "app.api.entity.get_entities"
            tags:
                - "entities"
            summary: "Return list of know entities"
            responses:
                "200":
                    description: "Return list of know entities"

    /v1/entities/{etype}:
        get:
            operationId: "app.api.entity.get_entities_by_type"
            tags:
                - "entities"
            parameters:
                - $ref: "#/components/parameters/etype"
            summary: "Return list of know entities per type"
            responses:
                "200":
                    description: "Return list of know entities per type"

    /v1/entity/{eid}:
        get:
            operationId: "app.api.entity.get_one_entity"
            tags:
                - "entities"
            summary: "Returns the details regarding an entity"
            parameters:
                - $ref: "#/components/parameters/eid"
            responses:
                "200":
                    description: "Returns the detailed of specified entity"
                "404":
                    description: "This entity doesnt' exists"
    #     delete:
    #         operationId: "app.api.entity.delete_one_entity"
    #         tags:
    #             - "entities"
    #         summary: "Delete an entity"
    #         parameters:
    #             - $ref: "#/components/parameters/eid"
    #         responses:
    #             "200":
    #                 description: "Entity was deleted sucessfully"
    #             "404":
    #                 description: "Entity doesn't exists"
    #     put:
    #         operationId: "app.api.entity.update_one_entity"
    #         tags:
    #             - "entities"
    #         summary: "Update an entity"
    #         requestBody:
    #             description: "Entity to be updated"
    #             required: True
    #             content:
    #                 application/json:
    #                     schema:
    #                         x-body-name: "entity"
    #                         $ref: "#/components/schemas/Entity"
    #         responses:
    #             "200":
    #                 description: "Entity updated sucessfully"
    #             "404":
    #                 description: "Entity doesn't exists"

    /v1/scale/:
        get:
            operationId: "app.api.scale.get_scale"
            tags:
                - "scale"
            summary: "Returns the current value read by scale "
            responses:
                "200":
                    description: "Current read value"
    /v1/realscale/:
        get:
            operationId: "app.api.realscale.get_scale"
            tags:
                - "scale"
            summary: "Returns the current value read by scale "
            responses:
                "200":
                    description: "Current read value"

    /v1/input:
        post:
            operationId: "app.api.input.create_entry"
            tags:
                - "input"
            summary: "send a new command to the backend"
            requestBody:
                description: "Sends a command"
                required: True
                content:
                    application/json:
                        schema:
                            x-body-name: "data"
                            $ref: "#/components/schemas/Command"
            responses:
                "200":
                    description: "Command Successful"
                "400":
                    description: "Unknown Command"
        get:
            operationId: "app.api.input.get_entries"
            tags:
                - "input"
            summary: "Return list of entries"
            responses:
                "200":
                    description: "List of records"

    /v1/input/{rid}:
        delete:
            operationId: "app.api.input.delete_entry"
            tags:
                - "input"
            summary: "Remove an entry from the records"
            parameters:
                - $ref: "#/components/parameters/rid"
            responses:
                "200":
                    description: "Deletion successful"
                "404":
                    description: "Unknown record"